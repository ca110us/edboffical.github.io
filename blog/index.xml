<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on callous&#39; blog</title>
    <link>https://callous.cn/blog/</link>
    <description>Recent content in Blogs on callous&#39; blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 19 Apr 2023 23:45:00 +0800</lastBuildDate><atom:link href="https://callous.cn/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL Server Weak Password Detection</title>
      <link>https://callous.cn/blog/tech/weak/</link>
      <pubDate>Wed, 19 Apr 2023 23:45:00 +0800</pubDate>
      
      <guid>https://callous.cn/blog/tech/weak/</guid>
      <description>Recently, during the development of the Windows security agent, there is a feature to perform weak password detection on SQL Server. To obtain a feasible solution, we need to first understand how SQL Server stores and verifies passwords.
Hash algorithm and verification function The calculation and verification of password hash are actually reverse processes and former can deduce the latter. This article only focuses on versions after SQL Server 2012. Since that, SQL Server has been using the same algorithm, which is more universal.</description>
    </item>
    
    <item>
      <title>基于内核 Kprobe 的服务器监控防护方案</title>
      <link>https://callous.cn/blog/tech/kprobe/</link>
      <pubDate>Thu, 02 Sep 2021 18:00:00 +0800</pubDate>
      
      <guid>https://callous.cn/blog/tech/kprobe/</guid>
      <description>在介绍文章内容前，首先必须要提一下 HIDS
 HIDS 全称是 Host-based Intrusion Detection System，即基于主机型入侵检测系统，专注于系统内部，监视系统全部或部分地动态的行为以及整个计算机系统的状态
 HIDS 的一般架构是这样：
 Agent：安装在企业内每台主机，进行系统事件监控，基线采集 管理端：管理每台agent的配置下发，状态检测，版本管理 规则分析中心：接收各种 agent 上传的数据，进行分类重整化，关联分析 展示平台：展示规则分析的结果  这篇文章主要讨论的内容是 Agent 中非常重要的系统事件监控环节，分享一种基于 Kprobe 的事件监控方案。
Kprobe 介绍 Kprobes 是 Linux 的一种特性，它主要被用来调试内核，如探测一些内核函数是否被调用、何时被调用、函数的入参和返回值等，相比于在内核代码中用 printk 来 log 调试信息，Kprobes 的优势在于不用重新编译内核代码，并且可以跟踪内核几乎所有位置的代码，也正是因为这样，它也被用作于监控一些系统事件，就是我今天要分享的内容。
不知道细心的朋友有没有发现，上面讲的是 Kprobes 而不是 Kprobe，网上很多文章都混用这两个词，我觉得他们是有区别的。Kprobes 上面讲了，是 Linux 的一种特性，一种轻量级 Linux 内核调试技术。而 Kprobe 仅是该技术中的一种探测手段（探针类型），除了 Kprobe ，还有 Jprobe 和 Kretprobe。
如何利用 Kprobe 进行事件监控防护 HIDS 常常以 hook 一些 syscall 的方式来捕获异常行为。如 hook execve 来获取异常的执行命令，hook connect 来分析异常的网络行为等。
本文的目的就是通过具体的例子，用 Kprobe 来 hook 一个具体的系统调用，并输出信息以供分析。</description>
    </item>
    
    <item>
      <title>一次 .git 泄漏引发的 “血案”</title>
      <link>https://callous.cn/blog/tech/php/</link>
      <pubDate>Tue, 31 Aug 2021 18:00:00 +0800</pubDate>
      
      <guid>https://callous.cn/blog/tech/php/</guid>
      <description>这是一篇发表在公司内部月刊的安全文章，意在提升开发部门的安全意识，所以概念解释颇多
 上周，在日常漏洞扫描工作中，发现某游戏部门的 web 服务存在 .git 代码泄漏问题，并且发现服务代码存在严重的文件包含漏洞。
扫描到这一问题后，我们第一时间确认了该系列安全问题尚未被攻击者利用（日志），之后第一时间重命名了 .git 目录。 “血案” 并未真实发生，下面只是模拟了在不知道服务器任何信息的情况下，利用各种暴露的风险因素，制造一起 “血案”。
整体事件过程：
1. .git 代码泄漏
2. 代码审计
 发现文件包含漏洞 大量的内部接口及数据库账户密码 可直接对多个游戏的账户增加积分、金币等  3. 漏洞利用
 利用其接口测试代码顺利执行恶意代码  4. 服务器权限
 阿里云内网服务  从最终结果来看，如果攻击发生，可能导致十分严重的后果：接口泄漏、各种环境密码泄漏、内网其他服务器可能被入侵、线上数据被修改等
此次展示过程到服务器权限这就结束了，但如果是真实攻击者进行持续渗透，内网服务器及整个业务线都有可能被攻击勒索，造成重大事故。
本次案例也从技术细节上发现了诸多安全问题，如不严谨的函数处理、将正式环境等信息加入版本控制等
攻击过程模拟 取得源码 通过工具就能直接从泄露的 .git 地址中，还原出项目源码，如下图 信息收集 在 web 渗透测试之前，最重要的一步是信息收集，可以说渗透的本质其实也是信息收集
在项目的根目录中我发现了这个文件，接触过 php 的朋友应该都很熟悉，这可以给我们提供很多的服务器信息，详情可以参考官方手册 phpinfo 不过，这里有一点要说明的是，虽然我们看到了这个文件，但真实环境中不一定存在这个文件。原因就是我们得到的代码是通过 .git 目录还原过来的，是 git 中有提交记录的文件。如果开发者在正式环境中对某个文件进行了更改，并且没有进行提交，那么我们也不能通过 .git 目录还原出该文件的真实状态。所以不要把正式环境的信息加入到版本控制中，是很有道理的。
然而这里我还是访问到了这个文件（所以这个信息收集得来全不费功夫），下面是 phpinfo 页面中查看到的这个 web 服务的根目录 代码审计 到现在为止，我们已经拿到了服务源码（其中包含数据库等敏感信息）和收集了一些服务器信息。那么接下来再来看下能否 ”攻陷“ 这台服务器。既然拿到了代码，就从代码入手吧。
审计代码发现，在某个入口文件处，引入了一个获取数据的 php 文件，其通过获取 GET 请求中的 url 参数，从指定文件目录中获取数据来渲染页面。</description>
    </item>
    
    <item>
      <title>一次 lua 虚拟机堆栈溢出排查</title>
      <link>https://callous.cn/blog/tech/registry/</link>
      <pubDate>Thu, 03 Jun 2021 17:00:00 +0800</pubDate>
      
      <guid>https://callous.cn/blog/tech/registry/</guid>
      <description>起因 这一次的问题出现在我开发的安全系统的 agent 中，在正式发布之前，测试到了这个问题，还算幸运😅 在内网测试环境中，agent 一直都没出现问题，直到运行五六天后，突然发现 lua 虚拟机崩溃了&amp;hellip;
日志分析 {&amp;quot;level&amp;quot;:&amp;quot;error&amp;quot;,&amp;quot;ts&amp;quot;:&amp;quot;2021-05-31 19:50:27.023&amp;quot;,&amp;quot;caller&amp;quot;:&amp;quot;workers/luaworker.go:132&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;call run func failed&amp;quot;,&amp;quot;error&amp;quot;:&amp;quot;/data/dep/agent/lua/utils.lua:38: registry overflow\nstack traceback:\n\t[G]: in function &#39;gsub&#39;\n\t/data/dep/agent/lua/utils.lua:38: in function &#39;split&#39;\n\tlua/port.lua:42: in function &#39;inspect&#39;\n\tlua/port.lua:21: in main chunk\n\t[G]: ?&amp;quot;,&amp;quot;lua&amp;quot;:&amp;quot;port.lua&amp;quot;} {&amp;quot;level&amp;quot;:&amp;quot;error&amp;quot;,&amp;quot;ts&amp;quot;:&amp;quot;2021-05-31 19:51:27.104&amp;quot;,&amp;quot;caller&amp;quot;:&amp;quot;workers/luaworker.go:132&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;call run func failed&amp;quot;,&amp;quot;error&amp;quot;:&amp;quot;/data/dep/agent/lua/utils.lua:38: registry overflow\nstack traceback:\n\t[G]: in function &#39;gsub&#39;\n\t/data/dep/agent/lua/utils.lua:38: in function &#39;split&#39;\n\tlua/port.lua:42: in function &#39;inspect&#39;\n\tlua/port.lua:21: in main chunk\n\t[G]: ?&amp;quot;,&amp;quot;lua&amp;quot;:&amp;quot;port.lua&amp;quot;} {&amp;quot;level&amp;quot;:&amp;quot;error&amp;quot;,&amp;quot;ts&amp;quot;:&amp;quot;2021-05-31 19:53:27.296&amp;quot;,&amp;quot;caller&amp;quot;:&amp;quot;workers/luaworker.go:132&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;call run func failed&amp;quot;,&amp;quot;error&amp;quot;:&amp;quot;/data/dep/agent/lua/utils.lua:38: registry overflow\nstack traceback:\n\t[G]: in function &#39;gsub&#39;\n\t/data/dep/agent/lua/utils.lua:38: in function &#39;split&#39;\n\tlua/port.lua:42: in function &#39;inspect&#39;\n\tlua/port.lua:21: in main chunk\n\t[G]: ?</description>
    </item>
    
    <item>
      <title>记录一次游戏服务 oom 抢救</title>
      <link>https://callous.cn/blog/tech/oom/</link>
      <pubDate>Mon, 18 Jan 2021 18:00:00 +0800</pubDate>
      
      <guid>https://callous.cn/blog/tech/oom/</guid>
      <description>起因 原本愉快的周日晚上，突然有客服部门的妹子在群里说游戏挂了！进不去了！还有一堆房间不存在的问题！
先说下这个挂掉的游戏，是从别的部门接手过来的，原班人马基本都离职了，留下一堆杂乱的资料，game 服务是用 c++ 写的。
解救玩家 因为事情出得比较急，而且导致了大规模的玩家不能登录游戏，所以领导的首先要求是解救玩家。单从现象上分析，大致猜测是某些原因导致的 game 服务崩溃或者失去响应，导致玩家无法进入房间。玩家的 room 信息应该会存在缓存当中。大概看了下代码，定位到关键位置，贴一下部分代码：
这里不得不吐槽一下，既然 Enter 房间不成功都会 Remove 掉这个缓存，在房间不存在的时候竟然不做处理，直接返回。另外，更不能理解的是重启服务也不会删除这个缓存，也就是说 game 因为故障崩溃掉的话，这里的玩家永远都会提示 “房间不存在”。
现在知道了，玩家的 room 缓存在 memcache 里，只要清除掉这些失效的 key，就能解放这些玩家。但是问题又来了，仅凭 key 的 value 无法判断出这个玩家的 room 是否失效了。于是又去看代码，最后的解决方案是带这个 key 前缀的键值全部清除，虽然这样会对正常游戏的玩家有点小影响，但也是总结了诸多方案中影响最小的方案，也幸亏他不完全是依赖缓存去找玩家的房间。
平时工作中接触的大部分是 redis，对 memcache 相对了解较少。看了官方文档后，发现并没有批量删除的方法，也没有获取一个前缀所有 key 的类似命令，所以批量删除只能写脚本。
然后问题又来了，我们并不知道哪些玩家卡在房间里了，如果是全服遍历，明显不可能，因为有大概 1000w 的用户数据。
最后的方案，是从数据库查询导出了所有当天登陆过得用户，大概是 9w 多条，还能接受。
于是写了下面的 go 程序：
mc := memcache.New(&amp;#34;memcache.xxxxxxx.xxxxx.xxxx.com:11211&amp;#34;) fmt.Println(&amp;#34;memcache error:&amp;#34;, mc.Ping()) time.Sleep(time.Second * 2) dealCount := 0 for _, v := range config.Records { key := &amp;#34;NOWSEVERID_&amp;#34; + v.</description>
    </item>
    
    <item>
      <title>Mimi</title>
      <link>https://callous.cn/blog/life/mimi/</link>
      <pubDate>Tue, 10 Nov 2020 23:03:22 +0800</pubDate>
      
      <guid>https://callous.cn/blog/life/mimi/</guid>
      <description>狗是人类最好的朋友 有时候总是觉得世界是有造物主的，科学的解释，宇宙起源于大爆炸，但总很难理解一抔没有思想的尘土何以造就有情感和智慧的生物。小时候总会想象一个场景：有一天，造物主召集了地球上的所有生物，对人类的可耻行为进行审判，所有的生物都唾弃人类的时候，只有猫和狗，投了反对票。猫和狗都是我很喜欢的家养宠物，但在我的主观感受上，狗与人的情感联结似乎更加密切。
前几年，我总爱半夜出门吃夜宵。也是一个普通的夜宵日，碰见了你。当时的你，毛发乱的像一颗球，拖着牵引绳，一看就是离家出走。如果不是你也喜欢出门吃夜宵，那我们大概也不会相遇。那会是冬天，很冷，于是我决定接济你一晚，第二天带你找主人。后来才知道，你是家里第二个毛孩子，和大哥不和，才决心离家出走。你的原主人问我愿不愿意领养你，我就欣然答应了。
第一天晚上，就感觉你好像也喜欢和我一起，可能是之前的主人对你不好。在我家你也是第二个毛孩子，然而还好，66（大白狗）像是一个大哥，在家有吵闹，在外都护着你。听说你们狗一生只认一个主人，66认的是我妈。你应该不是因为因为怕争宠，才认的我吧？你肯定也明白，只有我会在雨天抱着你回家，只有我会给你多些吃的，或者说你一直都觉得是我帮你脱离了苦海😊，总之你只认我，无论我回校读书几个月，只要一回家，你总抛弃我妈，跟我形影不离，好像真的就怕我的屁掉了，你接不到。一起吃夜宵、上网、逛街、熬夜，永远都跟在我身边，只要一下不见我，就开始慌张，有时候我也会躲在角落里，看慌张的你，然后哈哈笑。我还带你去过学校，为了躲保安，拎着你翻墙，还给围栏捅了一刀。直到我工作，还以为有能力把你接到我身边。我把你接来我的城市，在房子里给你安排了一个角落。但是那会，老大也是初入社会，以为工作除了认真别无选择。我总很晚下班，然后才带你在小区走一遭。那段时间，你一天就外出一次，所有屎尿都得憋到晚上，一定很难受，但每次带你出门，你都开心到发癫，不过好像也从来没有怪过我。就这样过了大半年，直到我被通知要“处理掉”你。那时候虽然有点无奈，但毕竟这大半年，你的生活质量很不高，就决定送你回去了。
后来我也是很久回一次家，你也还是和以前一样。只要我回来，就跟着我。你一定很期待我回家，每次返程都想跳上车跟我走。一直想着，等以后有条件了，再接你过来，直到11月9日，你的生命戛然而止，没有告别，我也再也没有机会了。
我不会忘记我的小棕狗，你让我懂得了珍惜身边的人和东西，谢谢你这些年的陪伴。</description>
    </item>
    
    <item>
      <title>2019抓取爱奇艺视频原地址</title>
      <link>https://callous.cn/blog/tech/iqiyi/</link>
      <pubDate>Sat, 29 Jun 2019 23:03:01 +0800</pubDate>
      
      <guid>https://callous.cn/blog/tech/iqiyi/</guid>
      <description>写这篇文章的目的 记录一下自己做过的事和学过的东西，希望大家抱着学习的目的来探讨。
过程 因为我对移动端的涉猎并不多，所以这次还是拿爱奇艺的网站来研究。配合 chrome dev tools （真好用），我发现pc端网页采用了hls协议，视频被切成 9 - 10 秒，这个可以用 ffmpeg 来下载列表视频，然后合成文件。因为游戏服务端的开发工作，我并没有很多空闲的时间，所以我转而研究了手机网页端。但其实两个分析的思路都差不多&amp;hellip;&amp;hellip;..
开始 先把 chrome dev tools 的模式切换到手机模式，然后随便点进一个电视剧或者电影的播放页面，刷新之后很容易找到请求视频地址的连接，如下图： 这里大概列下参数，太多了，一些可以断定的、可为空的或者不变的我就跳过了（可以看下面的js代码，有些直接就写死了）：
tvid=2763030300 // 电视剧Id &amp;amp;vid=efa9e607d213c7bb066360f0005db9c6 // 视频Id &amp;amp;bid=300 // 跟清晰度有关 下同 &amp;amp;abid=300 // 高清是300 清晰是200 &amp;amp;src=02020031010000000000 // 不变 &amp;amp;uid=1150484048 // uid 或空 &amp;amp;ut=1 // 不变 &amp;amp;ori=h5 // 来源 不变 &amp;amp;ps=0 // 不变 &amp;amp;messageId=dash_445455783d1046029fef03f7c3ba0f9f &amp;amp;ost=0 不变 &amp;amp;preIdAll= 不变 &amp;amp;locale=zh_cn 不变 &amp;amp;dfp=a0c99fd2610cf0473db8c0a7a62ac5a31577353dc9d69a44d2a164beb455ffa1fd // 可为空 &amp;amp;k_tag=1 // 不变 &amp;amp;k_ft1=18141941858304 &amp;amp;k_ft5=1 // 不变 &amp;amp;k_err_retries=3 // 不变 &amp;amp;k_uid=uct4vh5s98nnnm00uxfwg73l // 可为随机32位 String &amp;amp;pt=0 // 不变 &amp;amp;lid= // 不变 &amp;amp;cf= // 不变 &amp;amp;ct= // 不变 &amp;amp;ve=4d0345aec113399e2fc983530b36a907 &amp;amp;qd_v=2 // 暂时不变 &amp;amp;tm=1561334052647 // 时间戳 &amp;amp;qdy=a // 不变 &amp;amp;qds=0 // 不变 &amp;amp;vf=64adc57825317ca25c852960f19e3422 &amp;amp;callback=Z1561334031787 看了下大概的参数，然后在 chrome dev tools的资源页面搜索了一下关键字 k_uid，当然是混淆过的js，还是一行。 用工具自带的preety print功能后，稍微能看一点（感觉chrome事先都猜到了你想要的所有东西），这里上图： 分析参数 现在我们剩下需要分析的参数是：messageId,k_ft1,ve 和上图函数里没有列出的callback和vf，我们一个个来</description>
    </item>
    
  </channel>
</rss>
